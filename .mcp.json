{
  "mcpServers": {
    "sequential-thinking": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"],
      "description": "복잡한 다단계 추론 및 분석을 위한 MCP 서버",
      "portfolio_manager_usage": [
        "마이크로서비스 아키텍처 설계 및 서비스 간 의존성 분석",
        "4단계 로드맵(MVP→PWA→자동화→엔터프라이즈) 실행 계획 수립",
        "SSO 인증 시스템 및 서브도메인 라우팅 로직 설계",
        "이벤트 드리븐 아키텍처(Kafka/RabbitMQ) 메시지 플로우 분석",
        "노트 시스템(학습/변경/조사) 및 검색 인덱싱 전략 설계",
        "배포 오케스트레이션 및 자동화 워크플로우 분석"
      ]
    },
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_PERSONAL_ACCESS_TOKEN}"
      },
      "description": "GitHub 리포지토리 관리 및 코드 협업",
      "portfolio_manager_usage": [
        "모노레포 구조의 멀티 서비스 브랜치 관리",
        "FastAPI + Next.js 코드 리뷰 및 품질 관리",
        "Phase별 이슈 트래킹 및 로드맵 관리",
        "마이크로서비스별 릴리스 노트 자동 생성",
        "팀 협업 워크플로우 최적화",
        "보안 스캔 및 의존성 업데이트 관리"
      ]
    },
    "filesystem": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/Users/jaewon/portfolio/portfolio-manager"
      ],
      "description": "포트폴리오 매니저 프로젝트 파일 시스템 접근",
      "portfolio_manager_usage": [
        "FastAPI 서비스 (Auth, Portfolio, Notification) 자동 생성",
        "Next.js 14 App Router 페이지 및 컴포넌트 생성",
        "GraphQL Federation 스키마 및 리졸버 생성",
        "Kubernetes 매니페스트 및 Helm Chart 생성",
        "Docker Compose 설정 및 환경 변수 관리",
        "shadcn/ui 컴포넌트 및 Tailwind 스타일 관리"
      ]
    },
    "brave-search": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-brave-search"],
      "env": {
        "BRAVE_API_KEY": "${BRAVE_API_KEY}"
      },
      "description": "기술 문서 및 최신 정보 검색",
      "portfolio_manager_usage": [
        "Next.js 14 App Router 및 PWA 최신 구현 방법 검색",
        "FastAPI + GraphQL Federation 베스트 프랙티스 검색",
        "Kubernetes + Helm 배포 전략 및 오토스케일링 설정",
        "Apache Kafka + Redis Pub/Sub 실시간 아키텍처 검색",
        "PostgreSQL + TimescaleDB 성능 최적화 가이드",
        "Notion API 통합 및 문서 자동화 방법 검색"
      ]
    },
    "docker-mcp": {
      "command": "uvx",
      "args": ["docker-mcp"],
      "description": "Docker 컨테이너 관리 (PostgreSQL, Redis, Elasticsearch 등)",
      "portfolio_manager_usage": [
        "PostgreSQL 14+ 데이터베이스 컨테이너 관리 및 데이터 백업",
        "Redis 캐시 서버 관리 및 Pub/Sub 설정",
        "Elasticsearch 검색 엔진 컨테이너 및 인덱스 관리",
        "MongoDB NoSQL 데이터베이스 관리",
        "TimescaleDB 시계열 데이터 관리",
        "MinIO S3 호환 객체 스토리지 설정",
        "개발/스테이징/프로덕션 환경별 컨테이너 구성"
      ]
    },
    "upstash-context-7-mcp": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp@latest"],
      "description": "라이브러리 문서 및 컨텍스트 검색",
      "portfolio_manager_usage": [
        "Next.js 14, React 18 공식 문서 및 API 레퍼런스",
        "FastAPI + Strawberry GraphQL 문서 검색",
        "Zustand 상태관리 및 TanStack Query 가이드",
        "Tailwind CSS + shadcn/ui 컴포넌트 라이브러리",
        "PostgreSQL + SQLAlchemy ORM 최적화 가이드",
        "Kubernetes + Traefik Ingress 설정 문서"
      ]
    },
    "notion": {
      "command": "npx",
      "args": ["-y", "@notionhq/notion-mcp-server"],
      "env": {
        "NOTION_TOKEN": "${NOTION_TOKEN}",
        "OPENAPI_MCP_HEADERS": "{\"Authorization\": \"Bearer ${NOTION_TOKEN}\", \"Notion-Version\": \"2022-06-28\"}"
      },
      "description": "노션 워크스페이스의 프로젝트 문서 자동화 (공식 서버)",
      "features": {
        "page_management": "페이지 생성, 읽기, 업데이트, 삭제",
        "database_operations": "데이터베이스 쿼리, 필터링, 정렬",
        "content_search": "워크스페이스 전체 콘텐츠 검색",
        "comment_management": "댓글 읽기 및 관리",
        "block_operations": "블록 레벨 콘텐츠 조작"
      },
      "portfolio_manager_usage": [
        "PRD (Product Requirements Document) 자동 생성 및 업데이트",
        "TDD (Technical Design Document) 동기화",
        "API 명세서 및 OpenAPI 문서 자동 생성",
        "Sprint Planning & Retrospective 회의록 관리",
        "Post-mortem Report 및 장애 대응 기록",
        "Change Log & Release Notes 자동 생성",
        "아키텍처 결정 기록(ADR) 관리",
        "학습 노트 및 기술 리서치 백업"
      ]
    },
    "playwright": {
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@playwright/mcp@latest"],
      "env": {},
      "description": "브라우저 자동화, E2E 테스트, PWA 테스트",
      "usage": {
        "browser_automation": "페이지 네비게이션, 클릭, 폼 입력 등 자동화",
        "e2e_testing": "사용자 워크플로우 전체 테스트",
        "visual_testing": "스크린샷 캡처 및 시각적 변화 감지",
        "performance_monitoring": "Core Web Vitals, 로드 시간 측정",
        "cross_browser_testing": "Chrome, Firefox, Safari, Edge 호환성",
        "pwa_testing": "PWA 설치, 오프라인 모드, Service Worker 테스트",
        "accessibility_testing": "WCAG 준수 및 스크린 리더 호환성"
      },
      "portfolio_manager_scenarios": [
        "공개 포트폴리오 목록 → 프로젝트 상세 → 개별 사이트 접근 E2E 테스트",
        "관리자 로그인 → 프로젝트 생성 → 노트 작성 → 배포 워크플로우",
        "PWA 설치 및 오프라인 모드에서 노트 작성/동기화 테스트",
        "서브도메인별 SSO 인증 및 권한 접근 제어 테스트",
        "반응형 UI (모바일/태블릿/데스크톱) 테스트",
        "실시간 알림 및 WebSocket 연결 테스트",
        "검색 기능 및 자동완성 UI 테스트"
      ]
    },
    "memory": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-memory"],
      "env": {
        "MEMORY_FILE_PATH": "./portfolio-manager-memory.json"
      },
      "description": "지식 그래프 기반 지속적 메모리 시스템",
      "features": {
        "persistent_memory": "세션 간 컨텍스트 및 학습 내용 보존",
        "knowledge_graph": "엔티티 간 관계 매핑 및 시맨틱 검색",
        "conversation_continuity": "이전 대화 맥락을 기반한 지능적 응답",
        "project_state_tracking": "개발 진행 상황 및 의사결정 이력 추적",
        "semantic_search": "자연어 기반 기존 지식 검색"
      },
      "portfolio_manager_benefits": [
        "복잡한 마이크로서비스 아키텍처 이해도 누적",
        "4단계 로드맵 진행 상황 및 의사결정 이력 보존",
        "기술 스택별(Next.js, FastAPI, K8s) 베스트 프랙티스 학습",
        "프로젝트별 아키텍처 패턴 및 설계 결정 축적",
        "팀 협업 및 권한 관리 최적화 패턴 학습",
        "성능 최적화 및 장애 대응 노하우 축적"
      ]
    }
  },
  "projectInfo": {
    "name": "Portfolio Manager",
    "description": "포트폴리오 중앙 관리 및 SSO 통합 플랫폼",
    "stack": {
      "frontend": "Next.js 14 (App Router), React 18, TypeScript, Tailwind CSS, shadcn/ui",
      "backend": "FastAPI, GraphQL Federation, Kong/Traefik Gateway",
      "database": "PostgreSQL (Primary), MongoDB (NoSQL), Redis (Cache), Elasticsearch (Search)",
      "messaging": "Apache Kafka, RabbitMQ, Redis Pub/Sub",
      "infra": "Kubernetes, Docker, Helm, Terraform, Prometheus/Grafana",
      "services": "Auth Service (Keycloak), Portfolio Service, Notification Service, Analytics Service"
    },
    "architecture": "Microservices + Event-Driven + PWA",
    "deployment": "Local: Docker Compose, Production: Kubernetes + Traefik Ingress"
  },
  "mcpUsage": {
    "development": {
      "sequential-thinking": "복잡한 아키텍처 설계 및 마이크로서비스 분석",
      "github": "멀티 서비스 코드 관리, PR 리뷰, 로드맵 이슈 트래킹",
      "filesystem": "Next.js + FastAPI 프로젝트 파일 관리 및 코드 생성",
      "upstash-context-7-mcp": "프레임워크 문서 조회 및 베스트 프랙티스"
    },
    "testing": {
      "playwright": "PWA E2E 테스트, 크로스 브라우저 테스트, 성능 측정",
      "docker-mcp": "테스트 환경 컨테이너 관리 (PostgreSQL, Redis, ES)"
    },
    "documentation": {
      "notion": "PRD, TDD, API 문서, 회고록 자동 생성/동기화",
      "brave-search": "최신 기술 스택 정보 및 구현 가이드 검색"
    },
    "operations": {
      "memory": "프로젝트 컨텍스트 및 의사결정 이력 보존",
      "docker-mcp": "인프라 환경 관리 및 모니터링"
    }
  },
  "phaseIntegration": {
    "phase1_mvp": {
      "primary_mcps": ["filesystem", "upstash-context-7-mcp", "notion"],
      "focus": "Next.js + PostgreSQL MVP 개발, 기본 문서화"
    },
    "phase2_pwa": {
      "primary_mcps": ["playwright", "brave-search", "sequential-thinking"],
      "focus": "PWA 구현, 실시간 기능, 고급 테스트"
    },
    "phase3_automation": {
      "primary_mcps": ["github", "docker-mcp", "notion"],
      "focus": "CI/CD 파이프라인, 컨테이너화, 문서 자동화"
    },
    "phase4_enterprise": {
      "primary_mcps": ["sequential-thinking", "memory", "docker-mcp"],
      "focus": "마이크로서비스, 쿠버네티스, 모니터링 시스템"
    }
  }
}